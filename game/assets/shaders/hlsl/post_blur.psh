//--------------------------------------------------------------------------------------
// GLOBAL VARIABLES
//--------------------------------------------------------------------------------------
float4 gBlurOffsets[3];
float4 gBlurWeights[3];
float4 gBlurDirection;
Texture2D gTexture0;
SamplerState gTextureState;

//--------------------------------------------------------------------------------------
// STRUCTURES
//--------------------------------------------------------------------------------------
struct PS_INPUT
{
    float4 Position : SV_POSITION;
    float2 TexCoord : TEXCOORD0;
};

struct PS_OUTPUT
{
    float4 RGBColor : SV_TARGET;
};

//--------------------------------------------------------------------------------------
// PIXEL SHADER
//--------------------------------------------------------------------------------------

PS_OUTPUT PSMain( PS_INPUT In )
{ 
    PS_OUTPUT output;
   
	float4 color = { 0.0f, 0.0f, 0.0f, 0.0f };

	float blurOffsets[9];
	blurOffsets[0] = gBlurOffsets[0].x;
	blurOffsets[1] = gBlurOffsets[0].y;
	blurOffsets[2] = gBlurOffsets[0].z;
	blurOffsets[3] = gBlurOffsets[0].w;
	blurOffsets[4] = gBlurOffsets[1].x;
	blurOffsets[5] = gBlurOffsets[1].y;
	blurOffsets[6] = gBlurOffsets[1].z;
	blurOffsets[7] = gBlurOffsets[1].w;
	blurOffsets[8] = gBlurOffsets[2].x;

	float blurWeights[9];
	blurWeights[0] = gBlurWeights[0].x;
	blurWeights[1] = gBlurWeights[0].y;
	blurWeights[2] = gBlurWeights[0].z;
	blurWeights[3] = gBlurWeights[0].w;
	blurWeights[4] = gBlurWeights[1].x;
	blurWeights[5] = gBlurWeights[1].y;
	blurWeights[6] = gBlurWeights[1].z;
	blurWeights[7] = gBlurWeights[1].w;
	blurWeights[8] = gBlurWeights[2].x;
    
    for ( int i = 0; i < 9; i++ )
    {
        color += ( gTexture0.Sample( gTextureState, In.TexCoord + float2( blurOffsets[i], blurOffsets[i] ) * gBlurDirection.xy ) * blurWeights[i] );
    }
        
    output.RGBColor =  float4( color.rgb, 1.0f );
        
    return output;  
}